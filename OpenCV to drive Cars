
################## Method to give direct inputs to the game  #### SKIP THIS PART TO GET TO THE BOT

# direct inputs
# source to this solution and code:
# http://stackoverflow.com/questions/14489013/simulate-python-keypresses-for-controlling-a-game
# http://www.gamespp.com/directx/directInputKeyboardScanCodes.html

import ctypes
import time

SendInput = ctypes.windll.user32.SendInput


W = 0x11
A = 0x1E
S = 0x1F
D = 0x20

# C struct redefinitions 
PUL = ctypes.POINTER(ctypes.c_ulong)
class KeyBdInput(ctypes.Structure):
    _fields_ = [("wVk", ctypes.c_ushort),
                ("wScan", ctypes.c_ushort),
                ("dwFlags", ctypes.c_ulong),
                ("time", ctypes.c_ulong),
                ("dwExtraInfo", PUL)]

class HardwareInput(ctypes.Structure):
    _fields_ = [("uMsg", ctypes.c_ulong),
                ("wParamL", ctypes.c_short),
                ("wParamH", ctypes.c_ushort)]

class MouseInput(ctypes.Structure):
    _fields_ = [("dx", ctypes.c_long),
                ("dy", ctypes.c_long),
                ("mouseData", ctypes.c_ulong),
                ("dwFlags", ctypes.c_ulong),
                ("time",ctypes.c_ulong),
                ("dwExtraInfo", PUL)]

class Input_I(ctypes.Union):
    _fields_ = [("ki", KeyBdInput),
                 ("mi", MouseInput),
                 ("hi", HardwareInput)]

class Input(ctypes.Structure):
    _fields_ = [("type", ctypes.c_ulong),
                ("ii", Input_I)]

# Actuals Functions

def PressKey(hexKeyCode):
    extra = ctypes.c_ulong(0)
    ii_ = Input_I()
    ii_.ki = KeyBdInput( 0, hexKeyCode, 0x0008, 0, ctypes.pointer(extra) )
    x = Input( ctypes.c_ulong(1), ii_ )
    ctypes.windll.user32.SendInput(1, ctypes.pointer(x), ctypes.sizeof(x))

def ReleaseKey(hexKeyCode):
    extra = ctypes.c_ulong(0)
    ii_ = Input_I()
    ii_.ki = KeyBdInput( 0, hexKeyCode, 0x0008 | 0x0002, 0, ctypes.pointer(extra) )
    x = Input( ctypes.c_ulong(1), ii_ )
    ctypes.windll.user32.SendInput(1, ctypes.pointer(x), ctypes.sizeof(x))

#if __name__ == '__main__':
   # PressKey(0x11)
   # time.sleep(1)
    #ReleaseKey(0x11)
    #time.sleep(1)




################################# BOT JARODHAR STARTS HERE
import time
import cv2
from mss import mss
from numpy import ones, vstack
import numpy
from numpy.linalg import lstsq
from statistics import mean


sct = mss()           # Using mss was supposed to be faster but actually did not make much of a difference in 
                      # performance when compared to ScreenGrab from PIL

######## Draw lanes solution from sentdex. It essentially takes the line array from houghlinesP -> Stores their X and Y coordinates  
######## -> gets the equation for the lines and uses vstack ones and lstsq to calculate the slope and constants for the line equations
######## -> now it finds what the most popular lines are , ie, what region probably consists of the lanes of the roads
######## -> (unsure about this step) after appending the values of these lines, it takes the two most frequently occuring values and 
######## those are taken as the x1 y1 x2 y2 m (slope) for the two lines
######## these lines are returned at the end of the function


def draw_lanes(img, lines, color=[0, 255, 255], thickness=3):
    # if this fails, go with some default line
    try:

        # finds the maximum y value for a lane marker
        # (since we cannot assume the horizon will always be at the same point.)

        ys = []
        for i in lines:
            for ii in i:
                ys += [ii[1], ii[3]]        #LINES RETURNS A TRIPLE ARRAY ( [ [ [ something, somethingelse ] ] ]) SO TO ACCESS IT WE HAVE TO GO IN FURTHER VIA USING MULTIPLE FOR LOOPS
        min_y = min(ys)
        max_y = 600            # BECAUSE SCREEN RESOLUTION IS 800x600 
        new_lines = []
        line_dict = {}

        for idx, i in enumerate(lines):
            for xyxy in i:            # THE LINES RETURNED ARE  [ [ [ x1 y1 x2 y2 ] ] ] HENCE THIS LINE IS NECESSARY
                # These four lines:
                # modified from http://stackoverflow.com/questions/21565994/method-to-return-the-equation-of-a-straight-line-given-two-points
                # Used to calculate the definition of a line, given two sets of coords.
                x_coords = (xyxy[0], xyxy[2])  # SEPARATING THE X AND Y
                y_coords = (xyxy[1], xyxy[3])
                A = vstack([x_coords, ones(len(x_coords))]).T
                m, b = lstsq(A, y_coords)[0]  ####  VSTACK + LSTSQ  WERE USED TO GET THE SLOPE AND CONSTANT OF THE EQUATION OF LINE y = mx + b


                # Calculating our new, and improved, xs
                x1 = (min_y - b) / m
                x2 = (max_y - b) / m

                line_dict[idx] = [m, b, [int(x1), min_y, int(x2), max_y]]
                new_lines.append([int(x1), min_y, int(x2), max_y])

        final_lanes = {}

        for idx in line_dict:
            final_lanes_copy = final_lanes.copy()
            m = line_dict[idx][0]
            b = line_dict[idx][1]
            line = line_dict[idx][2]

            if len(final_lanes) == 0:
                final_lanes[m] = [[m, b, line]]

            else:
                found_copy = False

                for other_ms in final_lanes_copy:

                    if not found_copy:
                        if abs(other_ms * 1.2) > abs(m) > abs(other_ms * 0.8):        # to get the most popular lines ?? (unsure)
                            if abs(final_lanes_copy[other_ms][0][1] * 1.2) > abs(b) > abs(          
                                    final_lanes_copy[other_ms][0][1] * 0.8):
                                final_lanes[other_ms].append([m, b, line])
                                found_copy = True
                                break
                        else:
                            final_lanes[m] = [[m, b, line]]

        line_counter = {}

        for lanes in final_lanes:
            line_counter[lanes] = len(final_lanes[lanes])

        top_lanes = sorted(line_counter.items(), key=lambda item: item[1])[::-1][:2]

        lane1_id = top_lanes[0][0]
        lane2_id = top_lanes[1][0]

        def average_lane(lane_data):
            x1s = []
            y1s = []
            x2s = []
            y2s = []
            for data in lane_data:
                x1s.append(data[2][0])
                y1s.append(data[2][1])
                x2s.append(data[2][2])
                y2s.append(data[2][3])
            return int(mean(x1s)), int(mean(y1s)), int(mean(x2s)), int(mean(y2s))

        l1_x1, l1_y1, l1_x2, l1_y2 = average_lane(final_lanes[lane1_id])
        l2_x1, l2_y1, l2_x2, l2_y2 = average_lane(final_lanes[lane2_id])

        return [l1_x1, l1_y1, l1_x2, l1_y2], [l2_x1, l2_y1, l2_x2, l2_y2], lane1_id, lane2_id
    except Exception as e:
        #print(str(e))
        pass



monitor = {"top": 40, "left": 0, "width": 800, "height": 600}          # Defining what region to capture
def img_process(image):
    original_image = image
    img = numpy.array(image)
    gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)                    # easier to process grayscale
    gray_image = cv2.Canny(gray_image, threshold1=150, threshold2=300)     # fiddle with the threshold to eliminate unwanted noise and -
                                                                           # - achieve the best lane edges

   
    gray_image = cv2.GaussianBlur(gray_image, (3, 3), 0)                    # edges which are too sharp dont work well with hough lines so- 
    vertices = numpy.array([[[10,500],[10,300],[300,200],[500,200],[800,300],[800,500],  # - we need to blur the frames a bit to get the lines to connect
                         ]], numpy.int32)
    gray_image = roi(gray_image, [vertices])
    lines = cv2.HoughLinesP(gray_image, 1, numpy.pi/180,180, 20, 15)
    m1 = 0
    m2 = 0

    try:                                                                      # the lines may or may not be detected, hence use Try: 
        l1, l2, m1, m2 = draw_lanes(img, lines)
        cv2.line(original_image, (l1[0], l1[1]), (l1[2], l1[3]), [255, 0, 0], 15)
        cv2.line(original_image, (l2[0], l2[1]), (l2[2], l2[3]), [255, 0, 0], 15)
    except Exception as e:
        #print(str(e))
        pass
    try:
        for coords in lines:
            coords = coords[0]
            try:
                cv2.line(gray_image, (coords[0], coords[1]), (coords[2], coords[3]), [255, 0, 0], 3)


            except Exception as e:
                print(str(e))
    except Exception as e:
        pass
   # draw_lines(gray_image, lines)
    return gray_image, original_image, m1, m2


def straight():
    PressKey(W)
    ReleaseKey(A)
    ReleaseKey(D)

def right():
    PressKey(D)
    ReleaseKey(A)
    ReleaseKey(W)

def left():
    PressKey(A)
    ReleaseKey(W)
    ReleaseKey(D)


def roi(img, vertices):                   # REGION OF INTEREST - cuts out all the unwanted parts of the frames (sky, surroundings etc)
     #blank mask:
    mask = numpy.zeros_like(img)
    # fill the maskw
    cv2.fillPoly(mask, vertices, 255)
    # now only show the area that is the mask
    masked = cv2.bitwise_and(img, mask)
    return masked

def root():                               # where the main goods are 
    for i in list(range(4))[::-1]:
        print(i+1)
        time.sleep(1)
    while 1:
        last_time = time.time()
        screen = numpy.array(sct.grab(monitor))
        #cv2.imshow("Bot Jarodhar (PRE_ALPHA_STAGE)", gray_image)
        new_screen, org,m1,m2 = img_process(screen)

        if m1 >0 and m2 >0 :
            left()
            print('left')
        elif m1 < 0 and m2 < 0:
            right()
            print('right')
        else:
            straight()
            print('straight')

        cv2.imshow("Bot Jarodhar )", new_screen)
        cv2.imshow('bott jarogdhar',org )

        print("fps: {}".format(1 / (time.time() - last_time)))


        if cv2.waitKey(25) & 0xFF == ord("q"):
            cv2.destroyAllWindows()
            break
root()




